Creating an executable for your Python program can be achieved with libraries such as PyInstaller, py2exe, or cx_Freeze. Here, I'll show you how to use PyInstaller, as it's straightforward and supports a wide range of Python versions and operating systems.

1. First, you need to install PyInstaller. You can do this via pip:

   ```
   pip install pyinstaller
   ```

2. Once you've installed PyInstaller, you can create an executable by navigating to the directory containing your Python script in the terminal and running:

   ```
   pyinstaller --onefile your_script.py
   ```

   Replace "your_script.py" with the name of your Python script. The `--onefile` option tells PyInstaller to package everything into a single executable file. If you want to keep it in a directory form, you can exclude this option.

3. After running the command, PyInstaller will create a `dist` directory in the same directory as your Python script. Inside the `dist` directory, you'll find your executable file.

Please note:

- The executable file will be quite large because it includes a Python interpreter as well as the necessary modules.
- If your script relies on files with relative paths, those paths may no longer work when the script is compiled into an executable. To fix this, you can use the `os` module's functions to get the path of the executable and derive the paths of the other files from that.
- If your script uses external libraries, they must be installed in the same environment where you're running PyInstaller. If you're using a virtual environment (like with virtualenv or conda), you should activate that environment before running PyInstaller.
- If you're using Windows and your script's filename contains spaces, enclose it in double quotes when passing it to PyInstaller (e.g., `pyinstaller --onefile "your script.py"`).




--------------------

There are several steps involved in packaging your Python program for distribution, especially if you want to create a standalone executable. Here's a general guide:

**Step 1: Package your program**

Before you distribute your program, you should package it. Python uses a distribution format called a Wheel, which is a built-package format that can be installed with pip. To do this:

1. Create a `setup.py` file in your project directory. This file is used by setuptools to package your program. Here's a simple example:

    ```python
    from setuptools import setup, find_packages

    setup(
        name="your_program",
        version="0.1",
        packages=find_packages(),
        install_requires=[
            'pandas',
            'numpy',
            # add any additional packages you used here
        ],
    )
    ```

    Replace "your_program" with the name of your program, and "0.1" with your program's version number. In the `install_requires` list, add any additional packages your program uses.

2. Run the following command to create a Wheel distribution of your program:

    ```shell
    python setup.py bdist_wheel
    ```

    This will create a `.whl` file in a `dist` directory.

**Step 2: Create a standalone executable**

To create a standalone executable of your program, you can use a tool like PyInstaller. Install it using pip:

```shell
pip install pyinstaller
```

Then, run PyInstaller on your main script:

```shell
pyinstaller your_script.py
```

Replace "your_script.py" with the name of your script. This will create a `dist` directory if it doesn't already exist, and put the executable in there.

**Step 3: Distribute your program**

You can now distribute your program. The Wheel file you created can be installed with pip, and the executable can be run on its own.

For the libraries, you can share the `requirements.txt` file and have the users install the libraries using the following command:

```shell
pip install -r requirements.txt
```

Please note that creating an executable with PyInstaller will only work on similar platforms (i.e., if you create the executable on Windows, it will only run on Windows). If you want your program to run on different platforms, you will have to create the executable on those platforms.

-----------------------------------------------

- Homepage + 1 version for each button activated and a confition Displaypage(self, page_id) ?

- Button set value page_id to a number and the frame display_id s'adapte ?

- Mettre en place les scripts "définitifs" avec gestion des erreurs, etc...

- Se renseigner sur les fonctionnalités à mettre en place ? Court terme / Long terme ?

- Possibilité d'intéragir avec Dataloader ?